name: Build and Publish

on: [push, pull_request]

jobs:
    build:
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          python-version: ["3.10","3.11", "3.12"]
          os: [ubuntu-latest, macos-latest, windows-latest, manylinux]
      steps:
        - uses: actions/checkout@v4
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Set up dependencies on macOS
          if: runner.os == 'macOS'
          run: |
            brew install openssl
        - name: Set up dependencies on Windows
          if: runner.os == 'Windows'
          run: |
            choco install openssl
            powershell -Command "Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1; refreshenv"
        - name: Install Rust
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable
            profile: minimal
        - name: Install Maturin
          run: pip install maturin
        - name: Build with Maturin
          run: maturin build
        - name: Upload Wheels
          uses: actions/upload-artifact@v3
          with:
            name: wheels
            path: target/wheels/

    manylinux-build:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.10", "3.11", "3.12"]
          manylinux: [manylinux]
  
      steps:
        - uses: actions/checkout@v4
  
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
  
        - name: Set up dependencies on manylinux
          run: |
            yum install -y openssl python3-pip
  
        - name: Install Rust
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable
            profile: minimal
  
        - name: Install Maturin
          run: pip install maturin
  
        - name: Build with Maturin
          run: maturin build
  
        - name: Upload Wheels
          uses: actions/upload-artifact@v3
          with:
            name: wheels
            path: target/wheels/
  
      container:
        image: ${{ matrix.manylinux == 'manylinux' && 'quay.io/pypa/manylinux_2_28_x86_64'}}
        options: --user 1001  # ensure the container runs as a non-root user
      

    publish-to-pypi:
      name: >-
          Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
      needs:
      - build
      - manylinux-build
      runs-on: ubuntu-latest
      environment:
        name: pypi
        url: https://pypi.org/p/pytsa-ais
      permissions:
        id-token: write  # IMPORTANT: mandatory for trusted publishing

      steps:
        - name: Download all the dists
          uses: actions/download-artifact@v3
          with:
            name: wheels
            path: target/wheels/
        - name: Publish distribution to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            packages-dir: target/wheels/
          
    github-release:
      name: >-
        Sign the distribution with Sigstore
        and upload them as GitHub Release
      needs:
      - publish-to-pypi
      runs-on: ubuntu-latest

      permissions:
        contents: write
        id-token: write

      steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: target/wheels/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./target/wheels/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `target/wheels/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' target/wheels/**
          --repo '${{ github.repository }}'
